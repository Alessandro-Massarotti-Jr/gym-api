// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// @@map("name_table") serve para dar o nome para a tabela

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  name          String
  profile_image String?
  last_login    DateTime?
  deleted_at    DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt()
  Workouts      Workout[] @relation(name: "account_workouts")

  @@map("accounts")
}

model Category {
  id          String     @id @default(uuid())
  name        String
  description String?
  image_path  String?
  deleted_at  DateTime?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt()
  Exercises   Exercise[] @relation(name: "exercise_category")

  @@map("categories")
}

model Exercise {
  id               String            @id @default(uuid())
  name             String
  description      String?
  cover_image      String?
  category_id      String?
  level            ExercisesLevels
  deleted_at       DateTime?
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt()
  category         Category?         @relation(name: "exercise_category", fields: [category_id], references: [id], onDelete: SetNull)
  WorkoutExercises WorkoutExercise[] @relation(name: "exercise_workouts")
  ExercisesImages  ExerciseImage[]   @relation(name: "exercise_images")
  ExercisesVideos  ExerciseVideo[]   @relation(name: "exercise_videos")

  @@map("exercises")
}

model ExerciseImage {
  id          String    @id @default(uuid())
  exercise_id String
  image_path  String
  deleted_at  DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt()
  exercise    Exercise  @relation(name: "exercise_images", fields: [exercise_id], references: [id], onDelete: Cascade)

  @@map("exercise_images")
}

model ExerciseVideo {
  id          String    @id @default(uuid())
  exercise_id String
  video_path  String
  deleted_at  DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt()
  exercise    Exercise  @relation(name: "exercise_videos", fields: [exercise_id], references: [id], onDelete: Cascade)

  @@map("exercise_videos")
}

model Workout {
  id               String            @id @default(uuid())
  account_id       String
  started          Boolean           @default(false)
  started_at       DateTime?
  finished         Boolean           @default(false)
  finished_at      DateTime?
  deleted_at       DateTime?
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt()
  account          Account           @relation(name: "account_workouts", fields: [account_id], references: [id], onDelete: Cascade)
  WorkoutExercises WorkoutExercise[] @relation(name: "workout_exercises")

  @@map("workouts")
}

model WorkoutExercise {
  id              String    @id @default(uuid())
  exercise_id     String
  workout_id      String
  repetitions     Int
  repetitions_qtd Int
  done            Boolean   @default(false)
  done_at         DateTime?
  deleted_at      DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt()
  workout         Workout   @relation(name: "workout_exercises", fields: [workout_id], references: [id], onDelete: Cascade)
  exercise        Exercise  @relation(name: "exercise_workouts", fields: [exercise_id], references: [id], onDelete: Cascade)

  @@map("workout_exercise")
}

enum ExercisesLevels {
  BEGINNER
  INTERMEDIARY
  ADVANCED
}
